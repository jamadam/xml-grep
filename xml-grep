#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use Mojo::Asset::File;
use Mojo::DOM;
use File::Find;
use Getopt::Long 'GetOptionsFromArray';
    
    our $VERSION = '0.04';
    
    GetOptions(
        \my %options,
        'substr=i',
        'version',
        'help',
    );
    
    if ($options{version}) {
        print "xml-grep version $VERSION\n";
        exit;
    }
    
    if ($options{help}) {
        print <<'EOF';
usage: xml-grep [OPTIONS] $selector $file_pattern

Example: xml-grep 'a[href]' *.html

These options are available:

    -s, --substr    Length for resulted strings to shown
    -v, --version   Version information of this program
    -h, --help      Shows usage of this program

EOF
        
        exit;
    }

    my $selector        = $ARGV[0];
    my $file_pattern    = $ARGV[1] || '';
    $file_pattern =~ s{\*}{\.\+}g;
    
    find(sub {
        my $file = $_;
        if (-f $file && $file =~ qr/$file_pattern/) {
            my @array = treat_file($file, $selector);
            for my $line (@array) {
                $line = Encode::encode('utf-8', $line);
                print "$File::Find::name\: $line";
                print "\n";
            }
        }
    }, './');
    
    sub treat_file {
        my ($file, $selector) = @_;
        my $fh = Mojo::Asset::File->new(path => $file);
        my $content = $fh->slurp;
        my $encode = guess_encoding($content) || 'utf-8';
        $content = Encode::decode($encode, $content);
        my $dom = Mojo::DOM->new($content);
        my @ret = ();
        $dom->find($selector)->each(sub {
            my $dom = shift;
            my $ugly = $dom->to_xml;
            $ugly =~ s{\s+}{ }g;
            if ($options{substr}) {
                $ugly = substr($ugly, 0, $options{substr});
            }
            push(@ret, $ugly);
        });
        return @ret;
    }
    
    sub guess_encoding {
        my $content = shift;
        my $charset;
        if (my $head = ($content =~ qr{<head>(.+)</head>}is)[0]) {
            my $dom = Mojo::DOM->new($head);
            $dom->find('meta[http\-equiv=Content-Type]')->each(sub{
                my $meta_dom = shift;
                $charset = ($meta_dom->{content} =~ qr{; ?charset=([^;\$]+)})[0];
            });
        }
        return $charset;
    }
